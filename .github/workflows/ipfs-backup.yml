
name: IPFS Backup

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      UPLOAD_ID: ${{ github.run_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Upload to IPFS
        id: upload
        run: |
          # Set API URL
          API_URL="${{ vars.NEXT_PUBLIC_API_URL || 'https://3856-94-119-32-15.ngrok-free.app' }}"
          echo "API URL: $API_URL"
          
          # Calculate total chunks
          CHUNK_SIZE=50000000 # 50MB chunks
          TOTAL_CHUNKS=$(tar -czf - --exclude='.git' . | wc -c | awk -v size=$CHUNK_SIZE '{print int(($1+size-1)/size)}')
          echo "Total chunks: $TOTAL_CHUNKS"
          
          # Create temporary directory for chunks
          TEMP_DIR=$(mktemp -d)
          echo "Temp directory: $TEMP_DIR"
          
          # Split repository into chunks
          cd $TEMP_DIR
          tar -C $GITHUB_WORKSPACE -czf - --exclude='.git' . | split -b $CHUNK_SIZE - chunk-
          
          # Upload each chunk
          CHUNK_NUM=1
          for chunk in chunk-*; do
            echo "Uploading chunk $CHUNK_NUM of $TOTAL_CHUNKS"
            RESPONSE=$(curl -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Repository: ${{ github.repository }}" \
              -H "X-Upload-Id: ${{ env.UPLOAD_ID }}" \
              -H "X-Chunk-Number: $CHUNK_NUM" \
              -H "X-Total-Chunks: $TOTAL_CHUNKS" \
              -F "chunk=@$chunk" \
              "$API_URL/api/storage/upload/chunk")
            echo "Response: $RESPONSE"
            CHUNK_NUM=$((CHUNK_NUM+1))
          done
          
          # Cleanup temporary directory
          rm -rf $TEMP_DIR
          
          # Complete upload and get CID
          RESULT=$(curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"uploadId\":\"${{ env.UPLOAD_ID }}\"}" \
            "$API_URL/api/storage/upload/complete")
          
          CID=$(echo $RESULT | jq -r .cid)
          echo "cid=$CID" >> $GITHUB_OUTPUT

      - name: Update .gitvault and README
        if: steps.upload.outputs.cid != ''
        run: |
          # Create or update .gitvault file
          echo "latest_cid: ${{ steps.upload.outputs.cid }}" > .gitvault
          echo "last_backup: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault

          # Update README.md with badge
          if [ -f README.md ]; then
            # Remove old badge if exists
            sed -i '/^[![GitVault Backup]/d' README.md
            # Add new badge at the top
            sed -i "1i [![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/${{ steps.upload.outputs.cid }})" README.md
          else
            # Create README.md with badge
            echo "[![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/${{ steps.upload.outputs.cid }})" > README.md
          fi

          # Configure git
          git config --global user.name "GitVault Bot"
          git config --global user.email "bot@gitvault.app"
          
          # Commit and push changes
          git add .gitvault README.md
          git commit -m "Update GitVault CID and README badge [skip ci]" || exit 0
          git push
